from abc import ABC, abstractmethod


class GameCharacter(ABC):
    @abstractmethod
    def attack(self):
        pass


class Warrior(GameCharacter):
    def attack(self) -> str:
        return "–í–æ–∏–Ω –∞—Ç–∞–∫—É–µ—Ç –º–µ—á–æ–º! üí™"


class Mage(GameCharacter):
    def attack(self) -> str:
        return "–ú–∞–≥ –≤—ã–ø—É—Å–∫–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä! üî•"


class Archer(GameCharacter):
    def attack(self) -> str:
        return "–õ—É—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–∑ –ª—É–∫–∞! üèπ"


class CharacterFactory(ABC):
    @abstractmethod
    def create_character(self) -> GameCharacter:
        pass


class WarriorFactory(CharacterFactory):
    def create_character(self) -> GameCharacter:
        print('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Warrior!')
        return Warrior()


class MageFactory(CharacterFactory):
    def create_character(self) -> GameCharacter:
        print('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Mage!')
        return Warrior()


class ArcherFactory(CharacterFactory):
    def create_character(self) -> GameCharacter:
        print('–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Archer!')
        return Archer()


if __name__ == "__main__":
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: warrior, mage –∏–ª–∏ archer. üéÆ")

    factories = {
        "warrior": WarriorFactory(),
        "mage": MageFactory(),
        "archer": ArcherFactory()
    }

    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()

        if choice in factories:
            factory = factories[choice]
            character = factory.create_character()
            print(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice.capitalize()}!")
            print(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {character.attack()}")
            break
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! ü§∑‚Äç‚ôÇÔ∏è")
