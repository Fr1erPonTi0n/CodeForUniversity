import random

nums1 = [random.randint(-100, 100) for _ in range(random.randint(5, 30))]
print(f'1 массив чисел:\n{nums1}')

nums2 = [random.randint(-100, 100) for _ in range(random.randint(5, 30))]
print(f'2 массив чисел:\n{nums2}')

"""СОРТИРОВКА ПРОИСХОДИТ С ПОМОЩЬЮ МЕТОДА: СОРТИРОВКА ПУЗЬРЬКОМ.
   это метод сортировки массивов и списков путем последовательного
   сравнения соседних элементов и их обмена, если предшествующий
   оказывается больше последующего (при сортировке по возрастанию)"""

def bubble_sort_iterative(numbers):
    n = len(numbers)  # Получаем длину массива

    '''Количество итераций внешнего цикла определяется длинной списка минус единица, 
    так как когда второй элемент становиться на свое место, то первый уже однозначно 
                        минимальный и не требует сортировки.'''

    for i in range(n - 1):  # Внешний цикл

        '''Количество итераций внутреннего цикла зависит от номера итерации внешнего цикла,
        так как конец списка уже отсортирован, и выполнять проход по этим элементам смысла нет.'''

        for j in range(n - 1 - i):  # Внутрений цикл

            """Сравнение двух элементов, если 2 элемент оказывается больше чем 1, 
                                то они меняются местами"""

            if numbers[j] > numbers[j + 1]:  # Если поменять знак "<" на ">", то можно сделать сортировку по возрастанию
                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]


def bubble_sort_recursive(numbers, n=None):
    if n is None:
        n = len(numbers)

    """Базовый случай: если массив состоит из одного элемента или пуст, он уже отсортирован"""

    if n <= 1:
        return

    """Рекурсивно проходим по массиву и меняем элементы местами"""

    for i in range(n - 1):
        if numbers[i] > numbers[i + 1]:  # Если поменять знак "<" на ">", то можно сделать сортировку по возрастанию
            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]

    """Рекурсивный вызов для оставшейся части массива"""

    bubble_sort_recursive(numbers, n - 1)


bubble_sort_iterative(nums1)
print(f'Отсортированный 1 список, итерацией:\n{nums1}')

bubble_sort_recursive(nums2)
print(f'Отсортированный 2 список, рекурсией:\n{nums2}')
